二维数组动态分配复习:
1.malloc
malloc用于返回在堆栈中分配的内存，其返回的是一个指针，该指针是void类型可以转换成任何类型的指针
所以在将其返回给指针时要进行一个指针类型的强制转换
例如: int*p=(int*)malloc(n*sizeof(elemtype)) 注意:这里的malloc返回为void类型，在c中是可以自动转换的
int**p=(int**)malloc(n*sizeof(elemtype))这里也是可以自动转换（在leetcode中）
但是二者在c++中必须要强制类型转换不然会出错

2.new
该函数不需要用sizeof去分配每个内存空间的大小
例如:
int*p=new int[n];
这里的int类型可以更换成其他的类型，这样就无需sizeof去指定每个内存空间的大小了

3.二维数组的动态分配
二维数组在动态分配上，可以用矩阵去理解，但是实际上二维数组仍然是一个一维数组的形态，即所有的内存单元全部在
一维空间上。
动态分配二维数组:
int**p=(int**)malloc(n*sizeof(int*)),这里分配给二维指针指向的一维指针的数目
上面的一维指针代表的是二维数组的每列元素，接下来要给每个一维指针赋值一个可用的内存单元
选中每个一维指针:
for(int i,i<n;i++)
{
    p[i]=(int*)malloc(sizeof(int)*n);|另一种创建方式:p[i]=new int[n];
    另一种书写的形式:
    (*(p)+i)=(int*)malloc(sizeof(int)*n);|另一种创建方式:(*(p)+i)=new int[n];
}
这样就创建好了一个二维数组
